// TEMPORARY SOLUTION (QUICKSORT WITH INT ARRAY)
int		size;
int		*tab;

size = lstsize(stack->a);
tab = put_in_tab(stack->a, size);
median(tab, size);
free(tab);
tab = put_in_tab(stack->a, size);
if (size == 3)
	solve_three(stack);
else
	quicksort(stack, tab, 0, size - 1);
free(tab);

void	quickswap(t_stack *stack, int a, int b)
{
	int		i;
	int		size;

	i = -1;
	size = lstsize(stack->a);
	if (a == 0 && b == 1)
	{
		execute("sa", stack, 1);
		return ;
	}
	while (++i < a)
		execute("ra", stack, 1);
	execute("pb", stack, 1);
	while (++i < b)
		execute("ra", stack, 1);
	execute("pb", stack, 1);
	execute("sb", stack, 1);
	execute("pa", stack, 1);
	while (i--)
	{
		if (i == a)
			execute("pa", stack, 1);
		else
			execute("rra", stack, 1);
	}
}


void	quicksort(t_stack *stack, int *number, int first, int last)
{
	int		i;
	int		j;
	int		pivot;
	int		temp;

	if (first < last)
	{
		pivot = first;
		i = first;
		j = last;
		while (i < j)
		{
			while (number[i] <= number[pivot] && i < last)
				i++;
			while (number[j] > number[pivot])
				j--;
			if (i < j)
			{
				temp = number[i];
				number[i] = number[j];
				number[j] = temp;
				quickswap(stack, i, j);
			}
		}
		if (pivot != j)
		{
			temp = number[pivot];
			number[pivot] = number[j];
			number[j] = temp;
			quickswap(stack, pivot, j);
		}
		quicksort(stack, number, first, j - 1);
		quicksort(stack, number, j + 1, last);
	}
}
